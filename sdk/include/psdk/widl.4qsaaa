# 1 "objidl.idl" 1
cpp_quote("/**")
cpp_quote(" * This file is part of the mingw-w64 runtime package.")
cpp_quote(" * No warranty is given; refer to the file DISCLAIMER within this package.")
cpp_quote(" */")
cpp_quote("")
cpp_quote("#include <winapifamily.h>")
cpp_quote("")
cpp_quote("#if (NTDDI_VERSION >= NTDDI_VISTA && !defined(_WIN32_WINNT))")
cpp_quote("#define _WIN32_WINNT 0x0600")
cpp_quote("#endif")

cpp_quote("#if(NTDDI_VERSION >= NTDDI_WS03 && !defined(_WIN32_WINNT))")
cpp_quote("#define _WIN32_WINNT 0x0502")
cpp_quote("#endif")

cpp_quote("#if(NTDDI_VERSION >= NTDDI_WINXP && !defined(_WIN32_WINNT))")
cpp_quote("#define _WIN32_WINNT 0x0501")
cpp_quote("#endif")


import "unknwn.idl";
import "wtypes.idl";





# 1 "objidlbase.idl" 1
cpp_quote("/**")
cpp_quote(" * This file is part of the mingw-w64 runtime package.")
cpp_quote(" * No warranty is given; refer to the file DISCLAIMER within this package.")
cpp_quote(" */")
cpp_quote("")
cpp_quote("#include <winapifamily.h>")
cpp_quote("")
cpp_quote("#if (NTDDI_VERSION >= NTDDI_VISTA && !defined(_WIN32_WINNT))")
cpp_quote("#define _WIN32_WINNT 0x0600")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if (NTDDI_VERSION >= NTDDI_WS03 && !defined(_WIN32_WINNT))")
cpp_quote("#define _WIN32_WINNT 0x0502")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#if (NTDDI_VERSION >= NTDDI_WINXP && !defined(_WIN32_WINNT))")
cpp_quote("#define _WIN32_WINNT 0x0501")
cpp_quote("#endif")








cpp_quote("")
cpp_quote("#ifndef _OBJIDLBASE_")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")

interface IStream;
interface IEnumString;
interface IMultiQI;
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
interface IAsyncManager;
interface ICallFactory;
interface ISynchronize;
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
typedef struct _COSERVERINFO {
  DWORD dwReserved1;
  LPWSTR pwszName;
  COAUTHINFO *pAuthInfo;
  DWORD dwReserved2;
} COSERVERINFO;

cpp_quote("")
[local, object, uuid (00000003-0000-0000-C000-000000000046)]
interface IMarshal : IUnknown {
  typedef [unique] IMarshal *LPMARSHAL;
  HRESULT GetUnmarshalClass ([in] REFIID riid,[in, unique] void *pv,[in] DWORD dwDestContext,[in, unique] void *pvDestContext,[in] DWORD mshlflags,[out] CLSID *pCid);
  HRESULT GetMarshalSizeMax ([in] REFIID riid,[in, unique] void *pv,[in] DWORD dwDestContext,[in, unique] void *pvDestContext,[in] DWORD mshlflags,[out] DWORD *pSize);
  HRESULT MarshalInterface ([in, unique] IStream *pStm,[in] REFIID riid,[in, unique] void *pv,[in] DWORD dwDestContext,[in, unique] void *pvDestContext,[in] DWORD mshlflags);
  HRESULT UnmarshalInterface ([in, unique] IStream *pStm,[in] REFIID riid,[out] void **ppv);
  HRESULT ReleaseMarshalData ([in, unique] IStream *pStm);
  HRESULT DisconnectObject ([in] DWORD dwReserved);
}

cpp_quote("")
[local, object, uuid (ecc8691b-c1db-4dc0-855e-65f6c551af49)]
interface INoMarshal : IUnknown {
}

cpp_quote("")
[local, object, uuid (94ea2b94-e9cc-49e0-c0ff-ee64ca8f5b90)]
interface IAgileObject : IUnknown {
}

[local, object, uuid(c03f6a43-65a4-9818-987e-e0b810d2a6f2), pointer_default(unique)]
interface IAgileReference : IUnknown
{
   HRESULT Resolve([in] REFIID riid, [out, retval, iid_is(riid)] void **ppv);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[local, object, uuid (000001cf-0000-0000-C000-000000000046)]
interface IMarshal2 : IMarshal {
  typedef [unique] IMarshal2 *LPMARSHAL2;
}

cpp_quote("")
[local, object, uuid (00000002-0000-0000-C000-000000000046)]
interface IMalloc : IUnknown {
  typedef [unique] IMalloc *LPMALLOC;
cpp_quote("")
  void *Alloc ([in] SIZE_T cb);
  void *Realloc ([in] void *pv,[in] SIZE_T cb);
  void Free ([in] void *pv);
  SIZE_T GetSize ([in] void *pv);
  int DidAlloc ([in] void *pv);
  void HeapMinimize (void);
}

cpp_quote("")
[local, object, uuid (00000018-0000-0000-C000-000000000046)]
interface IStdMarshalInfo : IUnknown {
  typedef [unique] IStdMarshalInfo *LPSTDMARSHALINFO;
cpp_quote("")
  HRESULT GetClassForHandler ([in] DWORD dwDestContext,[in, unique] void *pvDestContext,[out] CLSID *pClsid);
}

cpp_quote("")
[object, local, uuid (00000019-0000-0000-C000-000000000046)]
interface IExternalConnection : IUnknown {
  typedef [unique] IExternalConnection *LPEXTERNALCONNECTION;
cpp_quote("")
  typedef enum tagEXTCONN {
    EXTCONN_STRONG = 0x0001,
    EXTCONN_WEAK = 0x0002,
    EXTCONN_CALLABLE = 0x0004,
  } EXTCONN;
cpp_quote("")
  DWORD AddConnection ([in] DWORD extconn,[in] DWORD reserved);
  DWORD ReleaseConnection ([in] DWORD extconn,[in] DWORD reserved,[in] BOOL fLastReleaseCloses);
}

cpp_quote("")
typedef [unique] IMultiQI *LPMULTIQI;
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
typedef struct tagMULTI_QI {
  const IID *pIID;
  IUnknown *pItf;
  HRESULT hr;
} MULTI_QI;

cpp_quote("")
[object, local, uuid (00000020-0000-0000-C000-000000000046),
async_uuid (000e0020-0000-0000-C000-000000000046)]
interface IMultiQI : IUnknown {
  HRESULT QueryMultipleInterfaces ([in] ULONG cMQIs,[in, out] MULTI_QI *pMQIs);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, local, uuid (00000021-0000-0000-C000-000000000046)]
interface IInternalUnknown : IUnknown {
  HRESULT QueryInternalInterface ([in] REFIID riid,[out] void **ppv);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (00000100-0000-0000-C000-000000000046), pointer_default (unique)]
interface IEnumUnknown : IUnknown {
  typedef [unique] IEnumUnknown *LPENUMUNKNOWN;
cpp_quote("")
  [local] HRESULT Next ([in] ULONG celt,[out] IUnknown **rgelt,[out] ULONG *pceltFetched);
  [call_as (Next)] HRESULT RemoteNext ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)] IUnknown **rgelt,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumUnknown **ppenum);
}

cpp_quote("")
[object, uuid (00000101-0000-0000-C000-000000000046), pointer_default (unique)]
interface IEnumString : IUnknown {
  typedef [unique] IEnumString *LPENUMSTRING;
cpp_quote("")
  [local] HRESULT Next ([in] ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
  [call_as (Next)] HRESULT RemoteNext ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)]LPOLESTR *rgelt,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumString **ppenum);
}

cpp_quote("")
[object, uuid (0c733a30-2a1c-11ce-ade5-00aa0044773d), pointer_default (unique)]
interface ISequentialStream : IUnknown {
  [local] HRESULT Read (void *pv,[in] ULONG cb, ULONG *pcbRead);
  [call_as (Read)] HRESULT RemoteRead ([out, size_is (cb), length_is (*pcbRead)]byte *pv,[in] ULONG cb,[out] ULONG *pcbRead);
  [local] HRESULT Write (void const *pv,[in] ULONG cb, ULONG *pcbWritten);
  [call_as (Write)] HRESULT RemoteWrite ([in, size_is (cb)] byte const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
}

cpp_quote("")
[object, uuid (0000000c-0000-0000-C000-000000000046), pointer_default (unique)]
interface IStream : ISequentialStream {
  typedef [unique] IStream *LPSTREAM;
  cpp_quote("")
  typedef struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
  } STATSTG;

cpp_quote("")
  typedef enum tagSTGTY {
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4
  } STGTY;

cpp_quote("")
  typedef enum tagSTREAM_SEEK {
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2
  } STREAM_SEEK;

cpp_quote("")
  typedef enum tagLOCKTYPE {
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4
  } LOCKTYPE;
cpp_quote("")
  [local] HRESULT Seek ([in] LARGE_INTEGER dlibMove,[in] DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
  [call_as (Seek)] HRESULT RemoteSeek ([in] LARGE_INTEGER dlibMove,[in] DWORD dwOrigin,[out] ULARGE_INTEGER *plibNewPosition);
  HRESULT SetSize ([in] ULARGE_INTEGER libNewSize);
  [local] HRESULT CopyTo ([in, unique] IStream *pstm,[in] ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
  [call_as (CopyTo)] HRESULT RemoteCopyTo ([in, unique] IStream *pstm,[in] ULARGE_INTEGER cb,[out] ULARGE_INTEGER *pcbRead,[out] ULARGE_INTEGER *pcbWritten);
  HRESULT Commit ([in] DWORD grfCommitFlags);
  HRESULT Revert ();
  HRESULT LockRegion ([in] ULARGE_INTEGER libOffset,[in] ULARGE_INTEGER cb,[in] DWORD dwLockType);
  HRESULT UnlockRegion ([in] ULARGE_INTEGER libOffset,[in] ULARGE_INTEGER cb,[in] DWORD dwLockType);
  HRESULT Stat ([out] STATSTG *pstatstg,[in] DWORD grfStatFlag);
  HRESULT Clone ([out] IStream **ppstm);
}

cpp_quote("")
[local, object, uuid (D5F56B60-593b-101a-B569-08002b2dbf7a)]
interface IRpcChannelBuffer : IUnknown {
  typedef unsigned long RPCOLEDATAREP;
cpp_quote("")
  typedef struct tagRPCOLEMESSAGE {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[5];
    ULONG rpcFlags;
  } RPCOLEMESSAGE;
cpp_quote("")
  typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
cpp_quote("")
  HRESULT GetBuffer ([in, out] RPCOLEMESSAGE *pMessage,[in] REFIID riid);
  HRESULT SendReceive ([in, out] RPCOLEMESSAGE *pMessage,[out] ULONG *pStatus);
  HRESULT FreeBuffer ([in, out] RPCOLEMESSAGE *pMessage);
  HRESULT GetDestCtx ([out] DWORD *pdwDestContext,[out] void **ppvDestContext);
  HRESULT IsConnected (void);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[local, object, uuid (594f31d0-7f19-11d0-b194-00a0c90dc8bf)]
interface IRpcChannelBuffer2 : IRpcChannelBuffer {
  HRESULT GetProtocolVersion ([out] DWORD *pdwVersion);
}

cpp_quote("")
[local, object, uuid (a5029fb6-3c34-11d1-9c99-00c04fb998aa), pointer_default (unique)]
interface IAsyncRpcChannelBuffer : IRpcChannelBuffer2 {
  HRESULT Send ([in, out] RPCOLEMESSAGE *pMsg,[in] ISynchronize *pSync,[out] ULONG *pulStatus);
  HRESULT Receive ([in, out] RPCOLEMESSAGE *pMsg,[out] ULONG *pulStatus);
  HRESULT GetDestCtxEx ([in] RPCOLEMESSAGE *pMsg,[out] DWORD *pdwDestContext,[out] void **ppvDestContext);
};

cpp_quote("")
[local, object, uuid (25b15600-0115-11d0-BF0D-00aa00b8dfd2)]
interface IRpcChannelBuffer3 : IRpcChannelBuffer2 {
  HRESULT Send ([in, out] RPCOLEMESSAGE *pMsg,[out] ULONG *pulStatus);
  HRESULT Receive ([in, out] RPCOLEMESSAGE *pMsg,[in] ULONG ulSize,[out] ULONG *pulStatus);
  HRESULT Cancel ([in, out] RPCOLEMESSAGE *pMsg);
  HRESULT GetCallContext ([in] RPCOLEMESSAGE *pMsg,[in] REFIID riid,[out] void **pInterface);
  HRESULT GetDestCtxEx ([in] RPCOLEMESSAGE *pMsg,[out] DWORD *pdwDestContext,[out] void **ppvDestContext);
  HRESULT GetState ([in] RPCOLEMESSAGE *pMsg,[out] DWORD *pState);
  HRESULT RegisterAsync ([in, out] RPCOLEMESSAGE *pMsg,[in] IAsyncManager *pAsyncMgr);
}

cpp_quote("")
[local, object, uuid (58a08519-24c8-4935-b482-3fd823333a4f)]
interface IRpcSyntaxNegotiate : IUnknown {
  HRESULT NegotiateSyntax ([in, out] RPCOLEMESSAGE *pMsg);
}

cpp_quote("")
[local, object, uuid (D5F56A34-593b-101a-B569-08002b2dbf7a)]
interface IRpcProxyBuffer : IUnknown {
  HRESULT Connect ([in, unique] IRpcChannelBuffer *pRpcChannelBuffer);
  void Disconnect (void);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[local, object, uuid (D5F56AFC-593b-101a-B569-08002b2dbf7a)]
interface IRpcStubBuffer : IUnknown {
  HRESULT Connect ([in] IUnknown *pUnkServer);
  void Disconnect ();
  HRESULT Invoke ([in, out] RPCOLEMESSAGE *_prpcmsg,[in] IRpcChannelBuffer *_pRpcChannelBuffer);
  IRpcStubBuffer *IsIIDSupported ([in] REFIID riid);
  ULONG CountRefs (void);
  HRESULT DebugServerQueryInterface ([out] void **ppv);
  void DebugServerRelease ([in] void *pv);
}

cpp_quote("")
[local, object, uuid (D5F569D0-593b-101a-B569-08002b2dbf7a)]
interface IPSFactoryBuffer : IUnknown {
  HRESULT CreateProxy ([in] IUnknown *pUnkOuter,[in] REFIID riid,[out] IRpcProxyBuffer **ppProxy,[out] void **ppv);
  HRESULT CreateStub ([in] REFIID riid,[in, unique] IUnknown *pUnkServer,[out] IRpcStubBuffer **ppStub);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
cpp_quote("#if  (_WIN32_WINNT >= 0x0400 ) || defined(_WIN32_DCOM)")
typedef struct SChannelHookCallInfo {
  IID iid;
  DWORD cbSize;
  GUID uCausality;
  DWORD dwServerPid;
  DWORD iMethod;
  void *pObject;
} SChannelHookCallInfo;

cpp_quote("")
[local, object, uuid (1008c4a0-7613-11cf-9af1-0020af6e72f4)]
interface IChannelHook : IUnknown {
  void ClientGetSize ([in] REFGUID uExtent,[in] REFIID riid,[out] ULONG *pDataSize);
  void ClientFillBuffer ([in] REFGUID uExtent,[in] REFIID riid,[in, out] ULONG *pDataSize,[in] void *pDataBuffer);
  void ClientNotify ([in] REFGUID uExtent,[in] REFIID riid,[in] ULONG cbDataSize,[in] void *pDataBuffer,[in] DWORD lDataRep,[in] HRESULT hrFault);
  void ServerNotify ([in] REFGUID uExtent,[in] REFIID riid,[in] ULONG cbDataSize,[in] void *pDataBuffer,[in] DWORD lDataRep);
  void ServerGetSize ([in] REFGUID uExtent,[in] REFIID riid,[in] HRESULT hrFault,[out] ULONG *pDataSize);
  void ServerFillBuffer ([in] REFGUID uExtent,[in] REFIID riid,[in, out] ULONG *pDataSize,[in] void *pDataBuffer,[in] HRESULT hrFault);
};
cpp_quote("#endif")
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if  (_WIN32_WINNT >= 0x0400 ) || defined(_WIN32_DCOM)")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[local, object, uuid (0000013d-0000-0000-C000-000000000046)]
interface IClientSecurity : IUnknown {
  typedef struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
  } SOLE_AUTHENTICATION_SERVICE;
cpp_quote("")
  typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
cpp_quote("")
  typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES {
    EOAC_NONE = 0x0,
    EOAC_MUTUAL_AUTH = 0x1,
    EOAC_STATIC_CLOAKING = 0x20,
    EOAC_DYNAMIC_CLOAKING = 0x40,
    EOAC_ANY_AUTHORITY = 0x80,
    EOAC_MAKE_FULLSIC = 0x100,
    EOAC_DEFAULT = 0x800,
    EOAC_SECURE_REFS = 0x2,
    EOAC_ACCESS_CONTROL = 0x4,
    EOAC_APPID = 0x8,
    EOAC_DYNAMIC = 0x10,
    EOAC_REQUIRE_FULLSIC = 0x200,
    EOAC_AUTO_IMPERSONATE = 0x400,
    EOAC_NO_CUSTOM_MARSHAL = 0x2000,
    EOAC_DISABLE_AAA = 0x1000
  } EOLE_AUTHENTICATION_CAPABILITIES;
cpp_quote("")
  const OLECHAR *COLE_DEFAULT_PRINCIPAL = (OLECHAR *) ((INT_PTR) -1);
  const void *COLE_DEFAULT_AUTHINFO = (void *) ((INT_PTR) -1);
cpp_quote("")
  typedef struct tagSOLE_AUTHENTICATION_INFO {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
  } SOLE_AUTHENTICATION_INFO,*PSOLE_AUTHENTICATION_INFO;
cpp_quote("")
  typedef struct tagSOLE_AUTHENTICATION_LIST {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
  } SOLE_AUTHENTICATION_LIST,*PSOLE_AUTHENTICATION_LIST;
cpp_quote("")
  HRESULT QueryBlanket ([in] IUnknown *pProxy,[out] DWORD *pAuthnSvc,[out] DWORD *pAuthzSvc,[out]OLECHAR **pServerPrincName,[out] DWORD *pAuthnLevel,[out] DWORD *pImpLevel,[out] void **pAuthInfo,[out] DWORD *pCapabilites);
  HRESULT SetBlanket ([in] IUnknown *pProxy,[in] DWORD dwAuthnSvc,[in] DWORD dwAuthzSvc,[in]OLECHAR *pServerPrincName,[in] DWORD dwAuthnLevel,[in] DWORD dwImpLevel,[in] void *pAuthInfo,[in] DWORD dwCapabilities);
  HRESULT CopyProxy ([in] IUnknown *pProxy,[out] IUnknown **ppCopy);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[local, object, uuid (0000013e-0000-0000-C000-000000000046)]
interface IServerSecurity : IUnknown {
  HRESULT QueryBlanket ([out] DWORD *pAuthnSvc,[out] DWORD *pAuthzSvc,[out]OLECHAR **pServerPrincName,[out] DWORD *pAuthnLevel,[out] DWORD *pImpLevel,[out] void **pPrivs,[in, out] DWORD *pCapabilities);
  HRESULT ImpersonateClient ();
  HRESULT RevertToSelf ();
  BOOL IsImpersonating ();
}

cpp_quote("")
typedef enum tagRPCOPT_PROPERTIES {
  COMBND_RPCTIMEOUT = 0x01,
  COMBND_SERVER_LOCALITY = 0x02,
  COMBND_RESERVED1 = 0x04
} RPCOPT_PROPERTIES;

cpp_quote("")
typedef enum tagRPCOPT_SERVER_LOCALITY_VALUES {
  SERVER_LOCALITY_PROCESS_LOCAL=0,
  SERVER_LOCALITY_MACHINE_LOCAL=1,
  SERVER_LOCALITY_REMOTE=2
} RPCOPT_SERVER_LOCALITY_VALUES;

cpp_quote("")
[object, local, uuid (00000144-0000-0000-C000-000000000046)]
interface IRpcOptions : IUnknown {
  HRESULT Set ([in] IUnknown *pPrx,[in] RPCOPT_PROPERTIES dwProperty,[in] ULONG_PTR dwValue);
  HRESULT Query ([in] IUnknown *pPrx,[in] RPCOPT_PROPERTIES dwProperty,[out] ULONG_PTR *pdwValue);
}
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
typedef enum tagGLOBALOPT_PROPERTIES {
  COMGLB_EXCEPTION_HANDLING = 1,
  COMGLB_APPID = 2,
  COMGLB_RPC_THREADPOOL_SETTING = 3,
  COMGLB_RO_SETTINGS = 4,
  COMGLB_UNMARSHALING_POLICY = 5,
} GLOBALOPT_PROPERTIES;

cpp_quote("")
typedef enum tagGLOBALOPT_EH_VALUES {
  COMGLB_EXCEPTION_HANDLE=0,
  COMGLB_EXCEPTION_DONOT_HANDLE_FATAL=1,
  COMGLB_EXCEPTION_DONOT_HANDLE=COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
  COMGLB_EXCEPTION_DONOT_HANDLE_ANY=2
} GLOBALOPT_EH_VALUES;

cpp_quote("")
typedef enum tagGLOBALOPT_RPCTP_VALUES {
  COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
  COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1,
} GLOBALOPT_RPCTP_VALUES;

cpp_quote("")
typedef enum tagGLOBALOPT_RO_FLAGS {
  COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
  COMGLB_FAST_RUNDOWN = 0x8,
  COMGLB_RESERVED1 = 0x10,
  COMGLB_RESERVED2 = 0x20,
  COMGLB_RESERVED3 = 0x40,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80
} GLOBALOPT_RO_FLAGS;

cpp_quote("")
typedef enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES {
  COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
  COMGLB_UNMARSHALING_POLICY_STRONG = 1,
  COMGLB_UNMARSHALING_POLICY_HYBRID = 2
} GLOBALOPT_UNMARSHALING_POLICY_VALUES;

cpp_quote("")
[object, local, pointer_default (unique), uuid (0000015b-0000-0000-C000-000000000046)]
interface IGlobalOptions : IUnknown {
  HRESULT Set ([in] GLOBALOPT_PROPERTIES dwProperty,[in] ULONG_PTR dwValue);
  HRESULT Query ([in] GLOBALOPT_PROPERTIES dwProperty,[out] ULONG_PTR *pdwValue);
}
cpp_quote("#endif")
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[uuid (00000022-0000-0000-C000-000000000046), version (1.0), pointer_default (unique), object]
interface ISurrogate : IUnknown {
  typedef [unique] ISurrogate *LPSURROGATE;
cpp_quote("")
  HRESULT LoadDllServer ([in] REFCLSID Clsid);
  HRESULT FreeSurrogate ();
}

cpp_quote("")
[local, object, uuid (00000146-0000-0000-C000-000000000046)]
interface IGlobalInterfaceTable : IUnknown {
  typedef [unique] IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
cpp_quote("")
  HRESULT RegisterInterfaceInGlobal ([in] IUnknown *pUnk,[in] REFIID riid,[out] DWORD *pdwCookie);
  HRESULT RevokeInterfaceFromGlobal ([in] DWORD dwCookie);
  HRESULT GetInterfaceFromGlobal ([in] DWORD dwCookie,[in] REFIID riid,[out, iid_is (riid)] void **ppv);
};
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (00000030-0000-0000-C000-000000000046)]
interface ISynchronize : IUnknown {
  HRESULT Wait ([in] DWORD dwFlags,[in] DWORD dwMilliseconds);
  HRESULT Signal ();
  HRESULT Reset ();
}

cpp_quote("")
[local, object, uuid (00000031-0000-0000-C000-000000000046)]
interface ISynchronizeHandle : IUnknown {
  HRESULT GetHandle ([out] HANDLE *ph);
}

cpp_quote("")
[local, object, uuid (00000032-0000-0000-C000-000000000046)]
interface ISynchronizeEvent : ISynchronizeHandle {
  HRESULT SetEventHandle ([in] HANDLE *ph);
}

cpp_quote("")
[local, object, uuid (00000033-0000-0000-C000-000000000046)]
interface ISynchronizeContainer : IUnknown {
  HRESULT AddSynchronize ([in] ISynchronize *pSync);
  HRESULT WaitMultiple ([in] DWORD dwFlags,[in] DWORD dwTimeOut,[out] ISynchronize **ppSync);
}

cpp_quote("")
[local, object, uuid (00000025-0000-0000-C000-000000000046)]
interface ISynchronizeMutex : ISynchronize {
  HRESULT ReleaseMutex ();
}

cpp_quote("")
[local, object, uuid (00000029-0000-0000-C000-000000000046)]
interface ICancelMethodCalls : IUnknown {
  typedef [unique] ICancelMethodCalls *LPCANCELMETHODCALLS;
cpp_quote("")
  HRESULT Cancel ([in] ULONG ulSeconds);
  HRESULT TestCancel (void);
}

cpp_quote("")
[local, object, uuid (0000002a-0000-0000-C000-000000000046)]
interface IAsyncManager : IUnknown {
  typedef enum tagDCOM_CALL_STATE {
    DCOM_NONE = 0x0,
    DCOM_CALL_COMPLETE = 0x1,
    DCOM_CALL_CANCELED = 0x2,
  } DCOM_CALL_STATE;
cpp_quote("")
  HRESULT CompleteCall ([in] HRESULT Result);
  HRESULT GetCallContext ([in] REFIID riid,[out] void **pInterface);
  HRESULT GetState ([out] ULONG *pulStateFlags);
}

cpp_quote("")
[local, object, uuid (1c733a30-2a1c-11ce-ade5-00aa0044773d), pointer_default (unique)]
interface ICallFactory : IUnknown {
  HRESULT CreateCall ([in] REFIID riid,[in] IUnknown *pCtrlUnk,[in] REFIID riid2,[out, iid_is (riid2)] IUnknown **ppv);
}

cpp_quote("")
[uuid (00000149-0000-0000-C000-000000000046), version (0.0), pointer_default (unique), local, object]
interface IRpcHelper : IUnknown {
  HRESULT GetDCOMProtocolVersion ([out] DWORD *pComVersion);
  HRESULT GetIIDFromOBJREF ([in] void *pObjRef,[out] IID **piid);
}

cpp_quote("")
[local, object, uuid (eb0cb9e8-7996-11d2-872e-0000f8080859),]
interface IReleaseMarshalBuffers : IUnknown {
  HRESULT ReleaseMarshalBuffer ([in, out] RPCOLEMESSAGE *pMsg,[in] DWORD dwFlags,[in, unique] IUnknown *pChnl);
}

cpp_quote("")
[local, object, uuid (0000002b-0000-0000-C000-000000000046)]
interface IWaitMultiple : IUnknown {
  HRESULT WaitMultiple ([in] DWORD timeout,[out] ISynchronize **pSync);
  HRESULT AddSynchronize ([in] ISynchronize *pSync);
}

cpp_quote("")
[local, object, uuid (00000147-0000-0000-C000-000000000046)]
interface IAddrTrackingControl : IUnknown {
  typedef [unique] IAddrTrackingControl *LPADDRTRACKINGCONTROL;
  HRESULT EnableCOMDynamicAddrTracking ();
  HRESULT DisableCOMDynamicAddrTracking ();
};

cpp_quote("")
[local, object, uuid (00000148-0000-0000-C000-000000000046)]
interface IAddrExclusionControl : IUnknown {
  typedef [unique] IAddrExclusionControl *LPADDREXCLUSIONCONTROL;
  HRESULT GetCurrentAddrExclusionList ([in]REFIID riid,[out, iid_is (riid)]void **ppEnumerator);
  HRESULT UpdateAddrExclusionList ([in]IUnknown *pEnumerator);
};



cpp_quote("")
[object, uuid (DB2F3ACA-2f86-11d1-8e04-00c04fb9989a), pointer_default (unique)] interface IPipeByte : IUnknown { HRESULT Pull ([out, size_is (cRequest), length_is (*pcReturned)]  BYTE *buf,[in] ULONG cRequest,[out] ULONG *pcReturned); HRESULT Push ([in, size_is (cSent)]  BYTE *buf,[in] ULONG cSent); } 
cpp_quote("")
[object, uuid (DB2F3ACC-2f86-11d1-8e04-00c04fb9989a), pointer_default (unique)] interface IPipeLong : IUnknown { HRESULT Pull ([out, size_is (cRequest), length_is (*pcReturned)]  LONG *buf,[in] ULONG cRequest,[out] ULONG *pcReturned); HRESULT Push ([in, size_is (cSent)]  LONG *buf,[in] ULONG cSent); } 
cpp_quote("")
[object, uuid (DB2F3ACE-2f86-11d1-8e04-00c04fb9989a), pointer_default (unique)] interface IPipeDouble : IUnknown { HRESULT Pull ([out, size_is (cRequest), length_is (*pcReturned)]  DOUBLE *buf,[in] ULONG cRequest,[out] ULONG *pcReturned); HRESULT Push ([in, size_is (cSent)]  DOUBLE *buf,[in] ULONG cSent); } 

cpp_quote("")
cpp_quote("#if defined USE_COM_CONTEXT_DEF || defined BUILDTYPE_COMSVCS || defined _COMBASEAPI_ || defined _OLE32_")

cpp_quote("")
typedef DWORD CPFLAGS;
cpp_quote("")
typedef struct tagContextProperty {
  GUID policyId;
  CPFLAGS flags;
  [unique] IUnknown *pUnk;
} ContextProperty;

cpp_quote("")
[local, object, uuid (000001c1-0000-0000-C000-000000000046), pointer_default (unique)]
interface IEnumContextProps : IUnknown {
  typedef [unique] IEnumContextProps *LPENUMCONTEXTPROPS;
cpp_quote("")
  HRESULT Next ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)]ContextProperty *pContextProperties,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumContextProps **ppEnumContextProps);
  HRESULT Count ([out] ULONG *pcelt);
}

cpp_quote("")
[local, object, uuid (000001c0-0000-0000-C000-000000000046), pointer_default (unique)]
interface IContext : IUnknown {
  HRESULT SetProperty ([in] REFGUID rpolicyId,[in] CPFLAGS flags,[in] IUnknown *pUnk);
  HRESULT RemoveProperty ([in] REFGUID rPolicyId);
  HRESULT GetProperty ([in] REFGUID rGuid,[out] CPFLAGS *pFlags,[out] IUnknown **ppUnk);
  HRESULT EnumContextProps ([out] IEnumContextProps **ppEnumContextProps);
}
cpp_quote("#endif")
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
typedef enum _APTTYPEQUALIFIER {
  APTTYPEQUALIFIER_NONE = 0,
  APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
  APTTYPEQUALIFIER_NA_ON_MTA = 2,
  APTTYPEQUALIFIER_NA_ON_STA = 3,
  APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
  APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
  APTTYPEQUALIFIER_APPLICATION_STA = 6,
} APTTYPEQUALIFIER;

cpp_quote("")
typedef enum _APTTYPE {
  APTTYPE_CURRENT = -1,
  APTTYPE_STA = 0,
  APTTYPE_MTA = 1,
  APTTYPE_NA = 2,
  APTTYPE_MAINSTA = 3
} APTTYPE;
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
typedef enum _THDTYPE {
  THDTYPE_BLOCKMESSAGES = 0,
  THDTYPE_PROCESSMESSAGES = 1
} THDTYPE;

cpp_quote("")
typedef DWORD APARTMENTID;

cpp_quote("")
[local, object, uuid (000001ce-0000-0000-C000-000000000046), pointer_default (unique)]
interface IComThreadingInfo : IUnknown {
  HRESULT GetCurrentApartmentType ([out] APTTYPE *pAptType);
  HRESULT GetCurrentThreadType ([out] THDTYPE *pThreadType);
  HRESULT GetCurrentLogicalThreadId ([out] GUID *pguidLogicalThreadId);
  HRESULT SetCurrentLogicalThreadId ([in] REFGUID rguid);
};

cpp_quote("")
[object, pointer_default (unique), uuid (72380d55-8d2b-43a3-8513-2b6ef31434e9)]
interface IProcessInitControl : IUnknown {
  HRESULT ResetInitializerTimeout ([in] DWORD dwSecondsRemaining);
};

cpp_quote("")
[object, local, pointer_default (unique), uuid (00000040-0000-0000-C000-000000000046)]
interface IFastRundown : IUnknown {
};

cpp_quote("")
typedef enum CO_MARSHALING_CONTEXT_ATTRIBUTES {
  CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
} CO_MARSHALING_CONTEXT_ATTRIBUTES;

cpp_quote("")
[local, object, uuid (D8F2F5E6-6102-4863-9f26-389a4676efde), pointer_default (unique)]
interface IMarshalingStream : IStream {
  HRESULT GetMarshalingContextAttribute ([in] CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,[out] ULONG_PTR *pAttributeValue);
};
cpp_quote("#endif")

cpp_quote("")
cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
cpp_quote("EXTERN_C const GUID  IID_ICallbackWithNoReentrancyToApplicationSTA;")
cpp_quote("#endif")

cpp_quote("#define _OBJIDLBASE_")
cpp_quote("#endif")
# 28 "objidl.idl" 2




interface IMoniker;
interface IEnumMoniker;
interface IRunningObjectTable;
interface IStorage;
interface IEnumSTATSTG;
interface IAdviseSink;
interface IBindCtx;
interface IEnumMoniker;

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[local, object, uuid (0000001d-0000-0000-C000-000000000046)]
interface IMallocSpy : IUnknown {
  typedef [unique] IMallocSpy *LPMALLOCSPY;
  SIZE_T PreAlloc ([in] SIZE_T cbRequest);
  void *PostAlloc ([in] void *pActual);
  void *PreFree ([in] void *pRequest,[in] BOOL fSpyed);
  void PostFree ([in] BOOL fSpyed);
  SIZE_T PreRealloc ([in] void *pRequest,[in] SIZE_T cbRequest,[out] void **ppNewRequest,[in] BOOL fSpyed);
  void *PostRealloc ([in] void *pActual,[in] BOOL fSpyed);
  void *PreGetSize ([in] void *pRequest,[in] BOOL fSpyed);
  SIZE_T PostGetSize ([in] SIZE_T cbActual,[in] BOOL fSpyed);
  void *PreDidAlloc ([in] void *pRequest,[in] BOOL fSpyed);
  int PostDidAlloc ([in] void *pRequest,[in] BOOL fSpyed,[in] int fActual);
  void PreHeapMinimize (void);
  void PostHeapMinimize (void);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (0000000e-0000-0000-C000-000000000046), pointer_default (unique)]

interface IBindCtx : IUnknown {
  typedef [unique] IBindCtx *LPBC;
  typedef [unique] IBindCtx *LPBINDCTX;
  cpp_quote("#if defined(__cplusplus)")
  cpp_quote("typedef struct tagBIND_OPTS {")
  cpp_quote("  DWORD cbStruct;")
  cpp_quote("  DWORD grfFlags;")
  cpp_quote("  DWORD grfMode;")
  cpp_quote("  DWORD dwTickCountDeadline;")
  cpp_quote("} BIND_OPTS, *LPBIND_OPTS;")
  cpp_quote("#else")

  typedef struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
  } BIND_OPTS,*LPBIND_OPTS;
  cpp_quote("#endif")

  cpp_quote("#if defined(__cplusplus)")
  cpp_quote("typedef struct tagBIND_OPTS2 : tagBIND_OPTS {")
  cpp_quote("DWORD           dwTrackFlags;")
  cpp_quote("DWORD           dwClassContext;")
  cpp_quote("LCID            locale;")
  cpp_quote("COSERVERINFO *  pServerInfo;")
  cpp_quote("} BIND_OPTS2, * LPBIND_OPTS2;")
  cpp_quote("#else")
  typedef struct tagBIND_OPTS2 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
  } BIND_OPTS2,*LPBIND_OPTS2;
  cpp_quote("#endif")

  cpp_quote("#if defined(__cplusplus)")
  cpp_quote("typedef struct tagBIND_OPTS3 : tagBIND_OPTS2 {")
  cpp_quote("HWND           hwnd;")
  cpp_quote("} BIND_OPTS3, * LPBIND_OPTS3;")
  cpp_quote("#else")

  typedef struct tagBIND_OPTS3 {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    HWND hwnd;
  } BIND_OPTS3,*LPBIND_OPTS3;
  cpp_quote("#endif")

  typedef enum tagBIND_FLAGS {
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2
  } BIND_FLAGS;
  HRESULT RegisterObjectBound ([in, unique] IUnknown *punk);
  HRESULT RevokeObjectBound ([in, unique] IUnknown *punk);
  HRESULT ReleaseBoundObjects (void);
  [local]
  HRESULT SetBindOptions ([in] BIND_OPTS *pbindopts);
  [call_as (SetBindOptions)]
  HRESULT RemoteSetBindOptions ([in] BIND_OPTS2 *pbindopts);
  [local]
  HRESULT GetBindOptions ([in, out] BIND_OPTS *pbindopts);
  [call_as (GetBindOptions)]
  HRESULT RemoteGetBindOptions ([in, out] BIND_OPTS2 *pbindopts);
  HRESULT GetRunningObjectTable ([out] IRunningObjectTable **pprot);
  HRESULT RegisterObjectParam ([in] LPOLESTR pszKey,[in, unique] IUnknown *punk);
  HRESULT GetObjectParam ([in] LPOLESTR pszKey,[out] IUnknown **ppunk);
  HRESULT EnumObjectParam ([out] IEnumString **ppenum);
  HRESULT RevokeObjectParam ([in] LPOLESTR pszKey);
}
[object, uuid (00000102-0000-0000-C000-000000000046), pointer_default (unique)]

interface IEnumMoniker : IUnknown {
  typedef [unique] IEnumMoniker *LPENUMMONIKER;
  [local]
  HRESULT Next ([in] ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
  [call_as (Next)]
  HRESULT RemoteNext ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)]IMoniker **rgelt,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumMoniker **ppenum);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (00000126-0000-0000-C000-000000000046)]
interface IRunnableObject : IUnknown {
  typedef [unique] IRunnableObject *LPRUNNABLEOBJECT;
  HRESULT GetRunningClass ([out] LPCLSID lpClsid);
  HRESULT Run ([in] LPBINDCTX pbc);
  [local]
  BOOL IsRunning ();
  [call_as (IsRunning)]
  HRESULT RemoteIsRunning ();
  HRESULT LockRunning ([in] BOOL fLock,[in] BOOL fLastUnlockCloses);
  HRESULT SetContainedObject ([in] BOOL fContained);
}
[object, uuid (00000010-0000-0000-C000-000000000046)]

interface IRunningObjectTable : IUnknown {
  typedef [unique] IRunningObjectTable *LPRUNNINGOBJECTTABLE;
  HRESULT Register ([in] DWORD grfFlags,[in, unique] IUnknown *punkObject,[in, unique] IMoniker *pmkObjectName,[out] DWORD *pdwRegister);
  HRESULT Revoke ([in] DWORD dwRegister);
  HRESULT IsRunning ([in, unique] IMoniker *pmkObjectName);
  HRESULT GetObject ([in, unique] IMoniker *pmkObjectName,[out] IUnknown **ppunkObject);
  HRESULT NoteChangeTime ([in] DWORD dwRegister,[in] FILETIME *pfiletime);
  HRESULT GetTimeOfLastChange ([in, unique] IMoniker *pmkObjectName,[out] FILETIME *pfiletime);
  HRESULT EnumRunning ([out] IEnumMoniker **ppenumMoniker);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (0000010c-0000-0000-C000-000000000046)]

interface IPersist : IUnknown {
  typedef [unique] IPersist *LPPERSIST;
  HRESULT GetClassID ([out] CLSID *pClassID);
}
[object, uuid (00000109-0000-0000-C000-000000000046), pointer_default (unique)]

interface IPersistStream : IPersist {
  typedef [unique] IPersistStream *LPPERSISTSTREAM;
  HRESULT IsDirty (void);
  HRESULT Load ([in, unique] IStream *pStm);
  HRESULT Save ([in, unique] IStream *pStm,[in] BOOL fClearDirty);
  HRESULT GetSizeMax ([out] ULARGE_INTEGER *pcbSize);
}
[object, uuid (0000000f-0000-0000-C000-000000000046), pointer_default (unique)]

interface IMoniker : IPersistStream {
  typedef [unique] IMoniker *LPMONIKER;
  typedef enum tagMKSYS {
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,

    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10
  }MKSYS;
  typedef [v1_enum] enum tagMKREDUCE {
    MKRREDUCE_ONE = 3<<16,

    MKRREDUCE_TOUSER = 2<<16,
    MKRREDUCE_THROUGHUSER = 1<<16,
    MKRREDUCE_ALL = 0
  } MKRREDUCE;
  [local]
  HRESULT BindToObject ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[in] REFIID riidResult,[out, iid_is (riidResult)] void **ppvResult);
  [call_as (BindToObject)]
  HRESULT RemoteBindToObject ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[in] REFIID riidResult,[out, iid_is (riidResult)] IUnknown **ppvResult);
  [local]
  HRESULT BindToStorage ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[in] REFIID riid,[out, iid_is (riid)] void **ppvObj);
  [call_as (BindToStorage)]
  HRESULT RemoteBindToStorage ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[in] REFIID riid,[out, iid_is (riid)] IUnknown **ppvObj);
  HRESULT Reduce ([in, unique] IBindCtx *pbc,[in] DWORD dwReduceHowFar,[in, out, unique] IMoniker **ppmkToLeft,[out] IMoniker **ppmkReduced);
  HRESULT ComposeWith ([in, unique] IMoniker *pmkRight,[in] BOOL fOnlyIfNotGeneric,[out] IMoniker **ppmkComposite);
  HRESULT Enum ([in] BOOL fForward,[out] IEnumMoniker **ppenumMoniker);
  HRESULT IsEqual ([in, unique] IMoniker *pmkOtherMoniker);
  HRESULT Hash ([out] DWORD *pdwHash);
  HRESULT IsRunning ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[in, unique] IMoniker *pmkNewlyRunning);
  HRESULT GetTimeOfLastChange ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[out] FILETIME *pFileTime);
  HRESULT Inverse ([out] IMoniker **ppmk);
  HRESULT CommonPrefixWith ([in, unique] IMoniker *pmkOther,[out] IMoniker **ppmkPrefix);
  HRESULT RelativePathTo ([in, unique] IMoniker *pmkOther,[out] IMoniker **ppmkRelPath);
  HRESULT GetDisplayName ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[out] LPOLESTR *ppszDisplayName);
  HRESULT ParseDisplayName ([in, unique] IBindCtx *pbc,[in, unique] IMoniker *pmkToLeft,[in] LPOLESTR pszDisplayName,[out] ULONG *pchEaten,[out] IMoniker **ppmkOut);
  HRESULT IsSystemMoniker ([out] DWORD *pdwMksys);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (f29f6bc0-5021-11ce-aa15-00006901293f), pointer_default (unique)]

interface IROTData : IUnknown {
  HRESULT GetComparisonData ([out, size_is (cbMax)] byte *pbData,[in] ULONG cbMax,[out] ULONG *pcbData);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (0000000d-0000-0000-C000-000000000046), pointer_default (unique)]

interface IEnumSTATSTG : IUnknown {
  typedef [unique] IEnumSTATSTG *LPENUMSTATSTG;
  [local]
  HRESULT Next ([in] ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
  [call_as (Next)]
  HRESULT RemoteNext ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)] STATSTG *rgelt,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumSTATSTG **ppenum);
}
[object, uuid (0000000b-0000-0000-C000-000000000046), pointer_default (unique)]

interface IStorage : IUnknown {
  typedef [unique] IStorage *LPSTORAGE;
  typedef struct tagRemSNB {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
    [size_is (ulCntChar)] OLECHAR rgString[];
  } RemSNB;
  typedef [unique] RemSNB *wireSNB;
  typedef [wire_marshal (wireSNB)] LPOLESTR *SNB;
  HRESULT CreateStream ([in, string] const OLECHAR *pwcsName,[in] DWORD grfMode,[in] DWORD reserved1,[in] DWORD reserved2,[out] IStream **ppstm);
  [local]
  HRESULT OpenStream ([in, string] const OLECHAR *pwcsName,[in, unique] void *reserved1,[in] DWORD grfMode,[in] DWORD reserved2,[out] IStream **ppstm);
  [call_as (OpenStream)]
  HRESULT RemoteOpenStream ([in, string] const OLECHAR *pwcsName,[in] unsigned long cbReserved1,[in, unique, size_is (cbReserved1)] byte *reserved1,[in] DWORD grfMode,[in] DWORD reserved2,[out] IStream **ppstm);
  HRESULT CreateStorage ([in, string] const OLECHAR *pwcsName,[in] DWORD grfMode,[in] DWORD reserved1,[in] DWORD reserved2,[out] IStorage **ppstg);
  HRESULT OpenStorage ([in, unique, string] const OLECHAR *pwcsName,[in, unique] IStorage *pstgPriority,[in] DWORD grfMode,[in, unique] SNB snbExclude,[in] DWORD reserved,[out] IStorage **ppstg);
  [local]
  HRESULT CopyTo ([in] DWORD ciidExclude,[in, unique, size_is (ciidExclude)] IID const *rgiidExclude,[in, unique] SNB snbExclude,[in, unique] IStorage *pstgDest);
  [call_as (CopyTo)]
  HRESULT RemoteCopyTo ([in] DWORD ciidExclude,[in, unique, size_is (ciidExclude)] IID const *rgiidExclude,[in, unique] SNB snbExclude,[in, unique] IStorage *pstgDest);
  HRESULT MoveElementTo ([in, string] const OLECHAR *pwcsName,[in, unique] IStorage *pstgDest,[in, string] const OLECHAR *pwcsNewName,[in] DWORD grfFlags);
  HRESULT Commit ([in] DWORD grfCommitFlags);
  HRESULT Revert ();
  [local]
  HRESULT EnumElements ([in] DWORD reserved1,[in, unique, size_is (1)] void *reserved2,[in] DWORD reserved3,[out] IEnumSTATSTG **ppenum);
  [call_as (EnumElements)]
  HRESULT RemoteEnumElements ([in] DWORD reserved1,[in] unsigned long cbReserved2,[in, unique, size_is (cbReserved2)] byte *reserved2,[in] DWORD reserved3,[out] IEnumSTATSTG **ppenum);
  HRESULT DestroyElement ([in, string] const OLECHAR *pwcsName);
  HRESULT RenameElement ([in, string] const OLECHAR *pwcsOldName,[in, string] const OLECHAR *pwcsNewName);
  HRESULT SetElementTimes ([in, unique, string] const OLECHAR *pwcsName,[in, unique] FILETIME const *pctime,[in, unique] FILETIME const *patime,[in, unique] FILETIME const *pmtime);
  HRESULT SetClass ([in] REFCLSID clsid);
  HRESULT SetStateBits ([in] DWORD grfStateBits,[in] DWORD grfMask);
  HRESULT Stat ([out] STATSTG *pstatstg,[in] DWORD grfStatFlag);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (0000010b-0000-0000-C000-000000000046), pointer_default (unique)]

interface IPersistFile : IPersist {
  typedef [unique] IPersistFile *LPPERSISTFILE;
  HRESULT IsDirty (void);
  HRESULT Load ([in] LPCOLESTR pszFileName,[in] DWORD dwMode);
  HRESULT Save ([in, unique] LPCOLESTR pszFileName,[in] BOOL fRemember);
  HRESULT SaveCompleted ([in, unique] LPCOLESTR pszFileName);
  HRESULT GetCurFile ([out] LPOLESTR *ppszFileName);
}
[object, uuid (0000010a-0000-0000-C000-000000000046), pointer_default (unique)]

interface IPersistStorage : IPersist {
  typedef [unique] IPersistStorage *LPPERSISTSTORAGE;
  HRESULT IsDirty (void);
  HRESULT InitNew ([in, unique] IStorage *pStg);
  HRESULT Load ([in, unique] IStorage *pStg);
  HRESULT Save ([in, unique] IStorage *pStgSave,[in] BOOL fSameAsLoad);
  HRESULT SaveCompleted ([in, unique] IStorage *pStgNew);
  HRESULT HandsOffStorage (void);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (0000000a-0000-0000-C000-000000000046), pointer_default (unique)]

interface ILockBytes : IUnknown {
  typedef [unique] ILockBytes *LPLOCKBYTES;
  [local]
  HRESULT ReadAt ([in] ULARGE_INTEGER ulOffset,[out, size_is (cb), length_is (*pcbRead)]void *pv,[in] ULONG cb,[out] ULONG *pcbRead);
  [call_as (ReadAt)]
  HRESULT _stdcall RemoteReadAt ([in] ULARGE_INTEGER ulOffset,[out, size_is (cb), length_is (*pcbRead)]byte *pv,[in] ULONG cb,[out] ULONG *pcbRead);
  [local]
  HRESULT WriteAt ([in] ULARGE_INTEGER ulOffset,[in, size_is (cb)] void const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
  [call_as (WriteAt)]
  HRESULT RemoteWriteAt ([in] ULARGE_INTEGER ulOffset,[in, size_is (cb)] byte const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
  HRESULT Flush ();
  HRESULT SetSize ([in] ULARGE_INTEGER cb);
  HRESULT LockRegion ([in] ULARGE_INTEGER libOffset,[in] ULARGE_INTEGER cb,[in] DWORD dwLockType);
  HRESULT UnlockRegion ([in] ULARGE_INTEGER libOffset,[in] ULARGE_INTEGER cb,[in] DWORD dwLockType);
  HRESULT Stat ([out] STATSTG *pstatstg,[in] DWORD grfStatFlag);
}
[object, uuid (00000103-0000-0000-C000-000000000046), pointer_default (unique)]

interface IEnumFORMATETC : IUnknown {
  typedef [unique] IEnumFORMATETC *LPENUMFORMATETC;

  typedef struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    [size_is (tdSize - sizeof (DWORD) - 4 *sizeof (WORD))]
    BYTE tdData[];
  } DVTARGETDEVICE;


  typedef CLIPFORMAT *LPCLIPFORMAT;
  typedef struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    [unique] DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
  }FORMATETC,*LPFORMATETC;
  [local]
  HRESULT Next ([in] ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
  [call_as (Next)]
  HRESULT RemoteNext ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)] FORMATETC *rgelt,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumFORMATETC **ppenum);
}
[object, uuid (00000105-0000-0000-C000-000000000046), pointer_default (unique)]

interface IEnumSTATDATA : IUnknown {
  typedef [unique] IEnumSTATDATA *LPENUMSTATDATA;
  typedef enum tagADVF {
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32
  } ADVF;
  typedef struct tagSTATDATA {
    FORMATETC formatetc;
    DWORD advf;
    [unique] IAdviseSink *pAdvSink;
    DWORD dwConnection;
  } STATDATA;
  typedef STATDATA *LPSTATDATA;
  [local]
  HRESULT Next ([in] ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
  [call_as (Next)]
  HRESULT RemoteNext ([in] ULONG celt,[out, size_is (celt), length_is (*pceltFetched)] STATDATA *rgelt,[out] ULONG *pceltFetched);
  HRESULT Skip ([in] ULONG celt);
  HRESULT Reset ();
  HRESULT Clone ([out] IEnumSTATDATA **ppenum);
}

[object, uuid (00000012-0000-0000-C000-000000000046), pointer_default (unique)]
interface IRootStorage : IUnknown {
  typedef [unique] IRootStorage *LPROOTSTORAGE;
  HRESULT SwitchToFile ([in] LPOLESTR pszFile);
}

[object, uuid (0000010f-0000-0000-C000-000000000046),
  async_uuid (00000150-0000-0000-C000-000000000046),
  pointer_default (unique)]
interface IAdviseSink : IUnknown {
  typedef IAdviseSink *LPADVISESINK;
  typedef [v1_enum] enum tagTYMED {
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0
  } TYMED;

  typedef struct tagRemSTGMEDIUM {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
    [size_is (cbData)] byte data[];
  } RemSTGMEDIUM;

  cpp_quote("#ifdef NONAMELESSUNION")
  cpp_quote("typedef struct tagSTGMEDIUM {")
  cpp_quote("DWORD tymed;")
  cpp_quote("union {")
  cpp_quote("HBITMAP hBitmap;")
  cpp_quote("HMETAFILEPICT hMetaFilePict;")
  cpp_quote("HENHMETAFILE hEnhMetaFile;")
  cpp_quote("HGLOBAL hGlobal;")
  cpp_quote("LPOLESTR lpszFileName;")
  cpp_quote("IStream *pstm;")
  cpp_quote("IStorage *pstg;")
  cpp_quote("} u;")
  cpp_quote("IUnknown *pUnkForRelease;")
  cpp_quote("}uSTGMEDIUM;")
  cpp_quote("#else")

  typedef struct tagSTGMEDIUM {
    DWORD tymed;
    [switch_type (DWORD), switch_is ((DWORD) tymed)]
    union {
      [case (TYMED_GDI)]
      HBITMAP hBitmap;
      [case (TYMED_MFPICT)]
      HMETAFILEPICT hMetaFilePict;
      [case (TYMED_ENHMF)]
      HENHMETAFILE hEnhMetaFile;
      [case (TYMED_HGLOBAL)]
      HGLOBAL hGlobal;
      [case (TYMED_FILE)]
      LPOLESTR lpszFileName;
      [case (TYMED_ISTREAM)]
      IStream *pstm;
      [case (TYMED_ISTORAGE)]
      IStorage *pstg;
      [default]
      ;
    } DUMMYUNIONNAME;
    [unique] IUnknown *pUnkForRelease;
  } uSTGMEDIUM;
  cpp_quote("#endif")















  typedef union _GDI_OBJECT switch (DWORD ObjectType) u {
    case 7: wireHBITMAP hBitmap;
    case 5: wireHPALETTE hPalette;
    default: wireHGLOBAL hGeneric;
  } GDI_OBJECT;
  typedef struct _userSTGMEDIUM {
    union _STGMEDIUM_UNION switch (DWORD tymed) u {
      case TYMED_NULL:;
      case TYMED_MFPICT: wireHMETAFILEPICT hMetaFilePict;
      case TYMED_ENHMF: wireHENHMETAFILE hHEnhMetaFile;
      case TYMED_GDI: GDI_OBJECT *hGdiHandle;
      case TYMED_HGLOBAL: wireHGLOBAL hGlobal;
      case TYMED_FILE: LPOLESTR lpszFileName;
      case TYMED_ISTREAM: BYTE_BLOB *pstm;
      case TYMED_ISTORAGE: BYTE_BLOB *pstg;
    } DUMMYUNIONNAME;
    IUnknown *pUnkForRelease;
  } userSTGMEDIUM;
  typedef [unique] userSTGMEDIUM *wireSTGMEDIUM;
  typedef [wire_marshal (wireSTGMEDIUM)] uSTGMEDIUM STGMEDIUM;
  typedef [unique] userSTGMEDIUM *wireASYNC_STGMEDIUM;
  typedef [wire_marshal (wireASYNC_STGMEDIUM)] STGMEDIUM ASYNC_STGMEDIUM;
  typedef STGMEDIUM *LPSTGMEDIUM;
  typedef struct _userFLAG_STGMEDIUM {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
  } userFLAG_STGMEDIUM;
  typedef [unique] userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
  typedef [wire_marshal (wireFLAG_STGMEDIUM)]
  struct _FLAG_STGMEDIUM {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
  } FLAG_STGMEDIUM;
  [local]
  void OnDataChange ([in, unique] FORMATETC *pFormatetc,[in, unique] STGMEDIUM *pStgmed);
  [local]
  void OnViewChange ([in] DWORD dwAspect,[in] LONG lindex);
  [local]
  void OnRename ([in] IMoniker *pmk);
  [local]
  void OnSave ();
  [local]
  void OnClose ();
  [call_as (OnDataChange)]
  HRESULT RemoteOnDataChange ([in, unique] FORMATETC *pFormatetc,[in, unique] ASYNC_STGMEDIUM *pStgmed);
  [call_as (OnViewChange)]
  HRESULT RemoteOnViewChange ([in] DWORD dwAspect,[in] LONG lindex);
  [call_as (OnRename)]
  HRESULT RemoteOnRename ([in] IMoniker *pmk);
  [call_as (OnSave)]
  HRESULT RemoteOnSave ();
  [call_as (OnClose)]
  HRESULT RemoteOnClose ();
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (00000125-0000-0000-C000-000000000046),
  async_uuid (00000151-0000-0000-C000-000000000046),
  pointer_default (unique)]

interface IAdviseSink2 : IAdviseSink {
  typedef [unique] IAdviseSink2 *LPADVISESINK2;
  [local]
  void OnLinkSrcChange ([in, unique] IMoniker *pmk);
  [call_as (OnLinkSrcChange)]
  HRESULT RemoteOnLinkSrcChange ([in, unique] IMoniker *pmk);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (0000010e-0000-0000-C000-000000000046), pointer_default (unique)]

interface IDataObject : IUnknown {
  typedef [unique] IDataObject *LPDATAOBJECT;
  typedef enum tagDATADIR {
    DATADIR_GET = 1,
    DATADIR_SET = 2
  } DATADIR;
  [local]
  HRESULT GetData ([in, unique] FORMATETC *pformatetcIn,[out] STGMEDIUM *pmedium);
  [call_as (GetData)]
  HRESULT RemoteGetData ([in, unique] FORMATETC *pformatetcIn,[out] STGMEDIUM *pRemoteMedium);
  [local]
  HRESULT GetDataHere ([in, unique] FORMATETC *pformatetc,[in, out] STGMEDIUM *pmedium);
  [call_as (GetDataHere)]
  HRESULT RemoteGetDataHere ([in, unique] FORMATETC *pformatetc,[in, out] STGMEDIUM *pRemoteMedium);
  HRESULT QueryGetData ([in, unique] FORMATETC *pformatetc);
  HRESULT GetCanonicalFormatEtc ([in, unique] FORMATETC *pformatectIn,[out] FORMATETC *pformatetcOut);
  [local]
  HRESULT SetData ([in, unique] FORMATETC *pformatetc,[in, unique] STGMEDIUM *pmedium,[in] BOOL fRelease);
  [call_as (SetData)]
  HRESULT RemoteSetData ([in, unique] FORMATETC *pformatetc,[in, unique] FLAG_STGMEDIUM *pmedium,[in] BOOL fRelease);
  HRESULT EnumFormatEtc ([in] DWORD dwDirection,[out] IEnumFORMATETC **ppenumFormatEtc);
  HRESULT DAdvise ([in] FORMATETC *pformatetc,[in] DWORD advf,[in, unique] IAdviseSink *pAdvSink,[out] DWORD *pdwConnection);
  HRESULT DUnadvise ([in] DWORD dwConnection);
  HRESULT EnumDAdvise ([out] IEnumSTATDATA **ppenumAdvise);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[local, object, uuid (00000110-0000-0000-C000-000000000046)]

interface IDataAdviseHolder : IUnknown {
  typedef [unique] IDataAdviseHolder *LPDATAADVISEHOLDER;
  HRESULT Advise ([in, unique] IDataObject *pDataObject,[in, unique] FORMATETC *pFetc,[in] DWORD advf,[in, unique] IAdviseSink *pAdvise,[out] DWORD *pdwConnection);
  HRESULT Unadvise ([in] DWORD dwConnection);
  HRESULT EnumAdvise ([out] IEnumSTATDATA **ppenumAdvise);
  HRESULT SendOnDataChange ([in, unique] IDataObject *pDataObject,[in] DWORD dwReserved,[in] DWORD advf);
}
[local, object, uuid (00000016-0000-0000-C000-000000000046)]

interface IMessageFilter : IUnknown {
  typedef [unique] IMessageFilter *LPMESSAGEFILTER;
  typedef enum tagCALLTYPE {
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5
  } CALLTYPE;
  typedef enum tagSERVERCALL {
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2
  } SERVERCALL;
  typedef enum tagPENDINGTYPE {
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2
  } PENDINGTYPE;
  typedef enum tagPENDINGMSG {
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2
  } PENDINGMSG;
  typedef struct tagINTERFACEINFO {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
  } INTERFACEINFO,*LPINTERFACEINFO;
  DWORD HandleInComingCall ([in] DWORD dwCallType,[in] HTASK htaskCaller,[in] DWORD dwTickCount,[in] LPINTERFACEINFO lpInterfaceInfo);
  DWORD RetryRejectedCall ([in] HTASK htaskCallee,[in] DWORD dwTickCount,[in] DWORD dwRejectType);
  DWORD MessagePending ([in] HTASK htaskCallee,[in] DWORD dwTickCount,[in] DWORD dwPendingType);
}

cpp_quote("")
extern const FMTID FMTID_SummaryInformation;
extern const FMTID FMTID_DocSummaryInformation;
extern const FMTID FMTID_UserDefinedProperties;
extern const FMTID FMTID_DiscardableInformation;
extern const FMTID FMTID_ImageSummaryInformation;
extern const FMTID FMTID_AudioSummaryInformation;
extern const FMTID FMTID_VideoSummaryInformation;
extern const FMTID FMTID_MediaFileSummaryInformation;





















































[object, uuid (00000140-0000-0000-C000-000000000046)]

interface IClassActivator : IUnknown {
  HRESULT GetClassObject ([in] REFCLSID rclsid,[in] DWORD dwClassContext,[in] LCID locale,[in] REFIID riid,[out, iid_is (riid)] void **ppv);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (99caf010-415e-11cf-8814-00aa00b569f5), pointer_default (unique)]

interface IFillLockBytes: IUnknown {
  [local]
  HRESULT FillAppend ([in, size_is (cb)] void const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
  [call_as (FillAppend)]
  HRESULT _stdcall RemoteFillAppend ([in, size_is (cb)] byte const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
  [local]
  HRESULT FillAt ([in] ULARGE_INTEGER ulOffset,[in, size_is (cb)] void const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
  [call_as (FillAt)]
  HRESULT _stdcall RemoteFillAt ([in] ULARGE_INTEGER ulOffset,[in, size_is (cb)] byte const *pv,[in] ULONG cb,[out] ULONG *pcbWritten);
  HRESULT SetFillSize ([in] ULARGE_INTEGER ulSize);
  HRESULT Terminate ([in] BOOL bCanceled);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (a9d758a0-4617-11cf-95fc-00aa00680db4), pointer_default (unique)]

interface IProgressNotify: IUnknown {
  HRESULT OnProgress ([in] DWORD dwProgressCurrent,[in] DWORD dwProgressMaximum,[in] BOOL fAccurate,[in] BOOL fOwner);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[local, object, uuid (0e6d4d90-6738-11cf-9608-00aa00680db4), pointer_default (unique)]

interface ILayoutStorage: IUnknown {
  typedef struct tagStorageLayout {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
  } StorageLayout;
  HRESULT __stdcall LayoutScript ([in] StorageLayout *pStorageLayout,[in] DWORD nEntries,[in] DWORD glfInterleavedFlag);
  HRESULT __stdcall BeginMonitor (void);
  HRESULT __stdcall EndMonitor (void);
  HRESULT __stdcall ReLayoutDocfile ([in] OLECHAR *pwcsNewDfName);
  HRESULT __stdcall ReLayoutDocfileOnILockBytes ([in] ILockBytes *pILockBytes);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (30f3d47a-6447-11d1-8e3c-00c04fb9386d)]
interface IBlockingLock: IUnknown {
  HRESULT Lock ([in] DWORD dwTimeout);
  HRESULT Unlock (void);
}
[object, uuid (bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4)]
interface ITimeAndNoticeControl: IUnknown {
  HRESULT SuppressChanges ([in] DWORD res1,[in] DWORD res2);
}
[object, uuid (8d19c834-8879-11d1-83e9-00c04fc2c6d4)]
interface IOplockStorage: IUnknown {
  HRESULT CreateStorageEx ([in] LPCWSTR pwcsName,[in] DWORD grfMode,[in] DWORD stgfmt,[in] DWORD grfAttrs,[in] REFIID riid,[out, iid_is (riid)] void **ppstgOpen);
  HRESULT OpenStorageEx ([in] LPCWSTR pwcsName,[in] DWORD grfMode,[in] DWORD stgfmt,[in] DWORD grfAttrs,[in] REFIID riid,[out, iid_is (riid)] void **ppstgOpen);
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[object, uuid (0e6d4d92-6738-11cf-9608-00aa00680db4), pointer_default (unique)]

interface IDirectWriterLock : IUnknown {
  HRESULT WaitForWriteAccess ([in] DWORD dwTimeout);
  HRESULT ReleaseWriteAccess ();
  HRESULT HaveWriteAccess ();
}

cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)")
[object, uuid (00000026-0000-0000-C000-000000000046)]
interface IUrlMon : IUnknown {
  HRESULT AsyncGetClassBits ([in] REFCLSID rclsid,[in, unique] LPCWSTR pszTYPE,[in, unique] LPCWSTR pszExt,[in] DWORD dwFileVersionMS,[in] DWORD dwFileVersionLS,[in, unique] LPCWSTR pszCodeBase,[in] IBindCtx *pbc,[in] DWORD dwClassContext,[in] REFIID riid,[in] DWORD flags);
}
[local, object, uuid (00000145-0000-0000-C000-000000000046)]
interface IForegroundTransfer : IUnknown {
  HRESULT AllowForegroundTransfer ([in] void *lpvReserved);
}
[uuid (969dc708-5c76-11d1-8d86-0000f804b057), object]
interface IThumbnailExtractor : IUnknown {
  HRESULT ExtractThumbnail ([in] IStorage *pStg,[in] ULONG ulLength,[in] ULONG ulHeight,[out] ULONG *pulOutputLength,[out] ULONG *pulOutputHeight,[out] HBITMAP *phOutputBitmap);
  HRESULT OnFileUpdated ([in] IStorage *pStg);
}
[object, pointer_default (unique), uuid (947990de-cc28-11d2-a0f7-00805f858fb1)]
interface IDummyHICONIncluder : IUnknown {
  HRESULT Dummy ([in]HICON h1,[in] HDC h2);
}

typedef enum tagApplicationType {
  ServerApplication,
  LibraryApplication
} ApplicationType;
typedef enum tagShutdownType {
  IdleShutdown,
  ForcedShutdown
} ShutdownType;
[object, local, uuid (000001d5-0000-0000-C000-000000000046), pointer_default (unique)]
interface IProcessLock : IUnknown {
  ULONG AddRefOnProcess ();
  ULONG ReleaseRefOnProcess ();
}
[object, local, uuid (000001d4-0000-0000-C000-000000000046), pointer_default (unique)]
interface ISurrogateService : IUnknown {
  HRESULT Init ([in] REFGUID rguidProcessID,[in] IProcessLock *pProcessLock,[out] BOOL *pfApplicationAware);
  HRESULT ApplicationLaunch ([in] REFGUID rguidApplID,[in] ApplicationType appType);
  HRESULT ApplicationFree ([in] REFGUID rguidApplID);
  HRESULT CatalogRefresh ([in] ULONG ulReserved);
  HRESULT ProcessShutdown ([in] ShutdownType shutdownType);
}

[local, object, uuid (00000034-0000-0000-C000-000000000046), pointer_default (unique)]
interface IInitializeSpy : IUnknown {
  typedef [unique] IInitializeSpy *LPINITIALIZESPY;
  HRESULT PreInitialize ([in] DWORD dwCoInit,[in] DWORD dwCurThreadAptRefs);
  HRESULT PostInitialize ([in] HRESULT hrCoInit,[in] DWORD dwCoInit,[in] DWORD dwNewThreadAptRefs);
  HRESULT PreUninitialize ([in] DWORD dwCurThreadAptRefs);
  HRESULT PostUninitialize ([in] DWORD dwNewThreadAptRefs);
};
cpp_quote("#endif")

cpp_quote("#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)")
[local, object, uuid (A2F05A09-27a2-42b5-BC0E-AC163EF49D9B), pointer_default (unique)]
interface IApartmentShutdown : IUnknown {
  void OnUninitialize ([in] UINT64 ui64ApartmentIdentifier);
}

cpp_quote("#endif")
