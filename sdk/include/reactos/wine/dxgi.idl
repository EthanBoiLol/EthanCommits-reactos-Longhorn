/*
 * Copyright 2007 Andras Kovacs
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "oaidl.idl";
import "ocidl.idl";


typedef enum DXGI_FORMAT {
    DXGI_FORMAT_UNKNOWN                 = 0,
    DXGI_FORMAT_R32G32B32A32_TYPELESS   = 1,
    DXGI_FORMAT_R32G32B32A32_FLOAT      = 2,
    DXGI_FORMAT_R32G32B32A32_UINT       = 3,
    DXGI_FORMAT_R32G32B32A32_SINT       = 4,
    DXGI_FORMAT_R32G32B32_TYPELESS      = 5,
    DXGI_FORMAT_R32G32B32_FLOAT         = 6,
    DXGI_FORMAT_R32G32B32_UINT          = 7,
    DXGI_FORMAT_R32G32B32_SINT          = 8,
    DXGI_FORMAT_R16G16B16A16_TYPELESS   = 9,
    DXGI_FORMAT_R16G16B16A16_FLOAT      = 10,
    DXGI_FORMAT_R16G16B16A16_UNORM      = 11,
    DXGI_FORMAT_R16G16B16A16_UINT       = 12,
    DXGI_FORMAT_R16G16B16A16_SNORM      = 13,
    DXGI_FORMAT_R16G16B16A16_SINT       = 14,
    DXGI_FORMAT_R32G32_TYPELESS         = 15,
    DXGI_FORMAT_R32G32_FLOAT            = 16,
    DXGI_FORMAT_R32G32_UINT             = 17,
    DXGI_FORMAT_R32G32_SINT             = 18,
    DXGI_FORMAT_R32G8X24_TYPELESS       = 19,
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT    = 20,
    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS= 21,
    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
    DXGI_FORMAT_R10G10B10A2_TYPELESS    = 23,
    DXGI_FORMAT_R10G10B10A2_UNORM       = 24,
    DXGI_FORMAT_R10G10B10A2_UINT        = 25,
    DXGI_FORMAT_R11G11B10_FLOAT         = 26,
    DXGI_FORMAT_R8G8B8A8_TYPELESS       = 27,
    DXGI_FORMAT_R8G8B8A8_UNORM          = 28,
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB     = 29,
    DXGI_FORMAT_R8G8B8A8_UINT           = 30,
    DXGI_FORMAT_R8G8B8A8_SNORM          = 31,
    DXGI_FORMAT_R8G8B8A8_SINT           = 32,
    DXGI_FORMAT_R16G16_TYPELESS         = 33,
    DXGI_FORMAT_R16G16_FLOAT            = 34,
    DXGI_FORMAT_R16G16_UNORM            = 35,
    DXGI_FORMAT_R16G16_UINT             = 36,
    DXGI_FORMAT_R16G16_SNORM            = 37,
    DXGI_FORMAT_R16G16_SINT             = 38,
    DXGI_FORMAT_R32_TYPELESS            = 39,
    DXGI_FORMAT_D32_FLOAT               = 40,
    DXGI_FORMAT_R32_FLOAT               = 41,
    DXGI_FORMAT_R32_UINT                = 42,
    DXGI_FORMAT_R32_SINT                = 43,
    DXGI_FORMAT_R24G8_TYPELESS          = 44,
    DXGI_FORMAT_D24_UNORM_S8_UINT       = 45,
    DXGI_FORMAT_R24_UNORM_X8_TYPELESS   = 46,
    DXGI_FORMAT_X24_TYPELESS_G8_UINT    = 47,
    DXGI_FORMAT_R8G8_TYPELESS           = 48,
    DXGI_FORMAT_R8G8_UNORM              = 49,
    DXGI_FORMAT_R8G8_UINT               = 50,
    DXGI_FORMAT_R8G8_SNORM              = 51,
    DXGI_FORMAT_R8G8_SINT               = 52,
    DXGI_FORMAT_R16_TYPELESS            = 53,
    DXGI_FORMAT_R16_FLOAT               = 54,
    DXGI_FORMAT_D16_UNORM               = 55,
    DXGI_FORMAT_R16_UNORM               = 56,
    DXGI_FORMAT_R16_UINT                = 57,
    DXGI_FORMAT_R16_SNORM               = 58,
    DXGI_FORMAT_R16_SINT                = 59,
    DXGI_FORMAT_R8_TYPELESS             = 60,
    DXGI_FORMAT_R8_UNORM                = 61,
    DXGI_FORMAT_R8_UINT                 = 62,
    DXGI_FORMAT_R8_SNORM                = 63,
    DXGI_FORMAT_R8_SINT                 = 64,
    DXGI_FORMAT_A8_UNORM                = 65,
    DXGI_FORMAT_R1_UNORM                = 66,
    DXGI_FORMAT_R9G9B9E5_SHAREDEXP      = 67,
    DXGI_FORMAT_R8G8_B8G8_UNORM         = 68,
    DXGI_FORMAT_G8R8_G8B8_UNORM         = 69,
    DXGI_FORMAT_BC1_TYPELESS            = 70,
    DXGI_FORMAT_BC1_UNORM               = 71,
    DXGI_FORMAT_BC1_UNORM_SRGB          = 72,
    DXGI_FORMAT_BC2_TYPELESS            = 73,
    DXGI_FORMAT_BC2_UNORM               = 74,
    DXGI_FORMAT_BC2_UNORM_SRGB          = 75,
    DXGI_FORMAT_BC3_TYPELESS            = 76,
    DXGI_FORMAT_BC3_UNORM               = 77,
    DXGI_FORMAT_BC3_UNORM_SRGB          = 78,
    DXGI_FORMAT_BC4_TYPELESS            = 79,
    DXGI_FORMAT_BC4_UNORM               = 80,
    DXGI_FORMAT_BC4_SNORM               = 81,
    DXGI_FORMAT_BC5_TYPELESS            = 82,
    DXGI_FORMAT_BC5_UNORM               = 83,
    DXGI_FORMAT_BC5_SNORM               = 84,
    DXGI_FORMAT_B5G6R5_UNORM            = 85,
    DXGI_FORMAT_B5G5R5A1_UNORM          = 86,
    DXGI_FORMAT_B8G8R8A8_UNORM          = 87,
    DXGI_FORMAT_B8G8R8X8_UNORM          = 88,
    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
    DXGI_FORMAT_B8G8R8A8_TYPELESS       = 90,
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB     = 91,
    DXGI_FORMAT_B8G8R8X8_TYPELESS       = 92,
    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB     = 93,
    DXGI_FORMAT_BC6H_TYPELESS           = 94,
    DXGI_FORMAT_BC6H_UF16               = 95,
    DXGI_FORMAT_BC6H_SF16               = 96,
    DXGI_FORMAT_BC7_TYPELESS            = 97,
    DXGI_FORMAT_BC7_UNORM               = 98,
    DXGI_FORMAT_BC7_UNORM_SRGB          = 99,
    DXGI_FORMAT_AYUV                    = 100,
    DXGI_FORMAT_Y410                    = 101,
    DXGI_FORMAT_Y416                    = 102,
    DXGI_FORMAT_NV12                    = 103,
    DXGI_FORMAT_P010                    = 104,
    DXGI_FORMAT_P016                    = 105,
    DXGI_FORMAT_420_OPAQUE              = 106,
    DXGI_FORMAT_YUY2                    = 107,
    DXGI_FORMAT_Y210                    = 108,
    DXGI_FORMAT_Y216                    = 109,
    DXGI_FORMAT_NV11                    = 110,
    DXGI_FORMAT_AI44                    = 111,
    DXGI_FORMAT_IA44                    = 112,
    DXGI_FORMAT_P8                      = 113,
    DXGI_FORMAT_A8P8                    = 114,
    DXGI_FORMAT_B4G4R4A4_UNORM          = 115,
    DXGI_FORMAT_FORCE_UINT              = 0xffffffff
} DXGI_FORMAT;


typedef struct DXGI_SAMPLE_DESC {
    UINT Count;
    UINT Quality;
} DXGI_SAMPLE_DESC;

typedef enum DXGI_MODE_ROTATION {
    DXGI_MODE_ROTATION_UNSPECIFIED  = 0,
    DXGI_MODE_ROTATION_IDENTITY     = 1,
    DXGI_MODE_ROTATION_ROTATE90     = 2,
    DXGI_MODE_ROTATION_ROTATE180    = 3,
    DXGI_MODE_ROTATION_ROTATE270    = 4,
} DXGI_MODE_ROTATION;

typedef enum DXGI_MODE_SCANLINE_ORDER {
    DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED        = 0,
    DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE        = 1,
    DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST  = 2,
    DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST  = 3,
} DXGI_MODE_SCANLINE_ORDER;

typedef enum DXGI_MODE_SCALING {
    DXGI_MODE_SCALING_UNSPECIFIED   = 0,
    DXGI_MODE_SCALING_CENTERED      = 1,
    DXGI_MODE_SCALING_STRETCHED     = 2,
} DXGI_MODE_SCALING;

typedef struct DXGI_RATIONAL {
    UINT Numerator;
    UINT Denominator;
} DXGI_RATIONAL;

typedef struct DXGI_MODE_DESC {
    UINT Width;
    UINT Height;
    DXGI_RATIONAL RefreshRate;
    DXGI_FORMAT Format;
    DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
    DXGI_MODE_SCALING Scaling;
} DXGI_MODE_DESC;

typedef struct DXGI_GAMMA_CONTROL_CAPABILITIES {
    BOOL ScaleAndOffsetSupported;
    float MaxConvertedValue;
    float MinConvertedValue;
    UINT NumGammaControlPoints;
    float ControlPointPositions[1025];
} DXGI_GAMMA_CONTROL_CAPABILITIES;

typedef struct DXGI_RGB {
    float Red;
    float Green;
    float Blue;
} DXGI_RGB;

typedef struct DXGI_GAMMA_CONTROL {
    DXGI_RGB Scale;
    DXGI_RGB Offset;
    DXGI_RGB GammaCurve[1025];
} DXGI_GAMMA_CONTROL;

const UINT _FACDXGI = 0x87a;

cpp_quote("#define MAKE_DXGI_STATUS(x)                         MAKE_HRESULT(0, _FACDXGI, x)")
cpp_quote("#define DXGI_STATUS_OCCLUDED                        MAKE_DXGI_STATUS(1)")
cpp_quote("#define DXGI_STATUS_CLIPPED                         MAKE_DXGI_STATUS(2)")
cpp_quote("#define DXGI_STATUS_NO_REDIRECTION                  MAKE_DXGI_STATUS(4)")
cpp_quote("#define DXGI_STATUS_NO_DESKTOP_ACCESS               MAKE_DXGI_STATUS(5)")
cpp_quote("#define DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE    MAKE_DXGI_STATUS(6)")
cpp_quote("#define DXGI_STATUS_MODE_CHANGED                    MAKE_DXGI_STATUS(7)")
cpp_quote("#define DXGI_STATUS_MODE_CHANGE_IN_PROGRESS         MAKE_DXGI_STATUS(8)")

cpp_quote("#define MAKE_DXGI_HRESULT(x)                        MAKE_HRESULT(1, _FACDXGI, x)")
cpp_quote("#define DXGI_ERROR_INVALID_CALL                     MAKE_DXGI_HRESULT(1)")
cpp_quote("#define DXGI_ERROR_NOT_FOUND                        MAKE_DXGI_HRESULT(2)")
cpp_quote("#define DXGI_ERROR_MORE_DATA                        MAKE_DXGI_HRESULT(3)")
cpp_quote("#define DXGI_ERROR_UNSUPPORTED                      MAKE_DXGI_HRESULT(4)")
cpp_quote("#define DXGI_ERROR_DEVICE_REMOVED                   MAKE_DXGI_HRESULT(5)")
cpp_quote("#define DXGI_ERROR_DEVICE_HUNG                      MAKE_DXGI_HRESULT(6)")
cpp_quote("#define DXGI_ERROR_DEVICE_RESET                     MAKE_DXGI_HRESULT(7)")
cpp_quote("#define DXGI_ERROR_WAS_STILL_DRAWING                MAKE_DXGI_HRESULT(10)")
cpp_quote("#define DXGI_ERROR_FRAME_STATISTICS_DISJOINT        MAKE_DXGI_HRESULT(11)")
cpp_quote("#define DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE     MAKE_DXGI_HRESULT(12)")
cpp_quote("#define DXGI_ERROR_DRIVER_INTERNAL_ERROR            MAKE_DXGI_HRESULT(32)")
cpp_quote("#define DXGI_ERROR_NONEXCLUSIVE                     MAKE_DXGI_HRESULT(33)")
cpp_quote("#define DXGI_ERROR_NOT_CURRENTLY_AVAILABLE          MAKE_DXGI_HRESULT(34)")

cpp_quote("#if 0")
typedef HANDLE HMONITOR;
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;
cpp_quote("#endif")

typedef UINT DXGI_USAGE;
const DXGI_USAGE DXGI_USAGE_SHADER_INPUT            = 0x10L;
const DXGI_USAGE DXGI_USAGE_RENDER_TARGET_OUTPUT    = 0x20L;
const DXGI_USAGE DXGI_USAGE_BACK_BUFFER             = 0x40L;
const DXGI_USAGE DXGI_USAGE_SHARED                  = 0x80L;
const DXGI_USAGE DXGI_USAGE_READ_ONLY               = 0x100L;
const DXGI_USAGE DXGI_USAGE_DISCARD_ON_PRESENT      = 0x200L;
const DXGI_USAGE DXGI_USAGE_UNORDERED_ACCESS        = 0x400L;

const UINT DXGI_ENUM_MODES_INTERLACED               = 1;
const UINT DXGI_ENUM_MODES_SCALING                  = 2;

typedef enum DXGI_SWAP_EFFECT {
    DXGI_SWAP_EFFECT_DISCARD    = 0,
    DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
    DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
    DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
} DXGI_SWAP_EFFECT;

typedef enum DXGI_RESIDENCY {
    DXGI_RESIDENCY_FULLY_RESIDENT               = 1,
    DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY    = 2,
    DXGI_RESIDENCY_EVICTED_TO_DISK              = 3,
} DXGI_RESIDENCY;

typedef struct DXGI_SURFACE_DESC {
    UINT Width;
    UINT Height;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
} DXGI_SURFACE_DESC;

typedef struct DXGI_MAPPED_RECT {
    INT Pitch;
    BYTE *pBits;
} DXGI_MAPPED_RECT;

typedef struct DXGI_OUTPUT_DESC {
    WCHAR DeviceName[32];
    RECT DesktopCoordinates;
    BOOL AttachedToDesktop;
    DXGI_MODE_ROTATION Rotation;
    HMONITOR Monitor;
} DXGI_OUTPUT_DESC;

typedef struct DXGI_FRAME_STATISTICS {
    UINT PresentCount;
    UINT PresentRefreshCount;
    UINT SyncRefreshCount;
    LARGE_INTEGER SyncQPCTime;
    LARGE_INTEGER SyncGPUTime;
} DXGI_FRAME_STATISTICS;

typedef struct DXGI_ADAPTER_DESC {
    WCHAR Description[128];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
} DXGI_ADAPTER_DESC;

typedef enum DXGI_SWAP_CHAIN_FLAG {
    DXGI_SWAP_CHAIN_FLAG_NONPREROTATED      = 1,
    DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH  = 2,
    DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE     = 4
} DXGI_SWAP_CHAIN_FLAG;

typedef struct DXGI_SWAP_CHAIN_DESC {
    DXGI_MODE_DESC BufferDesc;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    UINT BufferCount;
    HWND OutputWindow;
    BOOL Windowed;
    DXGI_SWAP_EFFECT SwapEffect;
    UINT Flags;
} DXGI_SWAP_CHAIN_DESC;

typedef struct DXGI_SHARED_RESOURCE {
    HANDLE Handle;
} DXGI_SHARED_RESOURCE;

[
    object,
    local,
    uuid(aec22fb8-76f3-4639-9be0-28eb43a67a2e)
]
interface IDXGIObject : IUnknown
{
    HRESULT SetPrivateData(
        [in] REFGUID guid,
        [in] UINT data_size,
        [in] const void *data
    );
    HRESULT SetPrivateDataInterface(
        [in] REFGUID guid,
        [in] const IUnknown *object
    );
    HRESULT GetPrivateData(
        [in] REFGUID guid,
        [in, out] UINT *data_size,
        [out] void *data
    );
    HRESULT GetParent(
        [in] REFIID riid,
        [out] void **parent
    );
}

[
    object,
    local,
    uuid(3d3e0379-f9de-4d58-bb6c-18d62992f1a6)
]
interface IDXGIDeviceSubObject : IDXGIObject
{
    HRESULT GetDevice(
        [in] REFIID riid,
        [out] void **device
    );
}

[
    object,
    uuid(035f3ab4-482e-4e50-b41f-8a7f8bd8960b),
    local,
    pointer_default(unique)
]
interface IDXGIResource : IDXGIDeviceSubObject
{
    HRESULT GetSharedHandle([out] HANDLE *pSharedHandle);
    HRESULT GetUsage([out] DXGI_USAGE *pUsage);
    HRESULT SetEvictionPriority([in] UINT EvictionPriority);
    HRESULT GetEvictionPriority([out, retval] UINT *pEvictionPriority);
}

[
    object,
    uuid(9d8e1289-d7b3-465f-8126-250e349af85d),
    local,
    pointer_default(unique)
]
interface IDXGIKeyedMutex : IDXGIDeviceSubObject
{
    HRESULT AcquireSync([in] UINT64 Key, [in] DWORD dwMilliseconds);
    HRESULT ReleaseSync([in] UINT64 Key);
}

[
    object,
    local,
    uuid(cafcb56c-6ac3-4889-bf47-9e23bbd260ec)
]
interface IDXGISurface : IDXGIDeviceSubObject
{
    HRESULT GetDesc(
        [out] DXGI_SURFACE_DESC *desc
    );
    HRESULT Map(
        [out] DXGI_MAPPED_RECT *mapped_rect,
        [in] UINT flags
    );
    HRESULT Unmap(
    );
}

[
    object,
    local,
    uuid(4ae63092-6327-4c1b-80ae-bfe12ea32b86)
]
interface IDXGISurface1 : IDXGISurface
{
    HRESULT GetDC(
        [in] BOOL discard,
        [out] HDC *hdc
    );
    HRESULT ReleaseDC(
        [in] RECT *dirty_rect
    );
}

[
    object,
    local,
    uuid(ae02eedb-c735-4690-8d52-5a8dc20213aa)
]
interface IDXGIOutput : IDXGIObject
{
    HRESULT GetDesc(
        [out] DXGI_OUTPUT_DESC *desc
    );
    HRESULT GetDisplayModeList(
        [in] DXGI_FORMAT format,
        [in] UINT flags,
        [in, out] UINT *mode_count,
        [out] DXGI_MODE_DESC *desc
    );
    HRESULT FindClosestMatchingMode(
        [in] const DXGI_MODE_DESC *mode,
        [out] DXGI_MODE_DESC *closest_match,
        [in] IUnknown *device
    );
    HRESULT WaitForVBlank(
    );
    HRESULT TakeOwnership(
        [in] IUnknown *device,
        [in] BOOL exclusive
    );
    void ReleaseOwnership(
    );
    HRESULT GetGammaControlCapabilities(
        [out] DXGI_GAMMA_CONTROL_CAPABILITIES *gamma_caps
    );
    HRESULT SetGammaControl(
        [in] const DXGI_GAMMA_CONTROL *gamma_control
    );
    HRESULT GetGammaControl(
        [out] DXGI_GAMMA_CONTROL *gamma_control
    );
    HRESULT SetDisplaySurface(
        [in] IDXGISurface *surface
    );
    HRESULT GetDisplaySurfaceData(
        [in] IDXGISurface *surface
    );
    HRESULT GetFrameStatistics(
        [out] DXGI_FRAME_STATISTICS *stats
    );
}

[
    object,
    local,
    uuid(2411e7e1-12ac-4ccf-bd14-9798e8534dc0)
]
interface IDXGIAdapter : IDXGIObject
{
    HRESULT EnumOutputs(
        [in] UINT output_idx,
        [in, out] IDXGIOutput **output
    );
    HRESULT GetDesc(
        [out] DXGI_ADAPTER_DESC *desc
    );
    HRESULT CheckInterfaceSupport(
        [in] REFGUID guid,
        [out] LARGE_INTEGER *umd_version
    );
}

cpp_quote("#define DXGI_MAX_SWAP_CHAIN_BUFFERS  (16)")

cpp_quote("#define DXGI_PRESENT_TEST                   __MSABI_LONG(0x00000001U)")
cpp_quote("#define DXGI_PRESENT_DO_NOT_SEQUENCE        __MSABI_LONG(0x00000002U)")
cpp_quote("#define DXGI_PRESENT_RESTART                __MSABI_LONG(0x00000004U)")
cpp_quote("#define DXGI_PRESENT_DO_NOT_WAIT            __MSABI_LONG(0x00000008U)")
cpp_quote("#define DXGI_PRESENT_STEREO_PREFER_RIGHT    __MSABI_LONG(0x00000010U)")
cpp_quote("#define DXGI_PRESENT_STEREO_TEMPORARY_MONO  __MSABI_LONG(0x00000020U)")
cpp_quote("#define DXGI_PRESENT_RESTRICT_TO_OUTPUT     __MSABI_LONG(0x00000040U)")

[
    object,
    local,
    uuid(310d36a0-d2e7-4c0a-aa04-6a9d23b8886a)
]
interface IDXGISwapChain : IDXGIDeviceSubObject
{
    HRESULT Present(
        [in] UINT sync_interval,
        [in] UINT flags
    );
    HRESULT GetBuffer(
        [in] UINT buffer_idx,
        [in] REFIID riid,
        [in, out] void **surface
    );
    HRESULT SetFullscreenState(
        [in] BOOL fullscreen,
        [in] IDXGIOutput *target
    );
    HRESULT GetFullscreenState(
        [out] BOOL *fullscreen,
        [out] IDXGIOutput **target
    );
    HRESULT GetDesc(
        [out] DXGI_SWAP_CHAIN_DESC *desc
    );
    HRESULT ResizeBuffers(
        [in] UINT buffer_count,
        [in] UINT width,
        [in] UINT height,
        [in] DXGI_FORMAT format,
        [in] UINT flags
    );
    HRESULT ResizeTarget(
        [in] const DXGI_MODE_DESC *target_mode_desc
    );
    HRESULT GetContainingOutput(
        [out] IDXGIOutput **output
    );
    HRESULT GetFrameStatistics(
        [out] DXGI_FRAME_STATISTICS *stats
    );
    HRESULT GetLastPresentCount(
        [out] UINT *last_present_count
    );
}

cpp_quote("#define DXGI_MWA_NO_WINDOW_CHANGES  0x1")
cpp_quote("#define DXGI_MWA_NO_ALT_ENTER       0x2")
cpp_quote("#define DXGI_MWA_NO_PRINT_SCREEN    0x4")
cpp_quote("#define DXGI_MWA_VALID              0x7")

[
    object,
    local,
    uuid(7b7166ec-21c7-44ae-b21a-c9ae321ae369)
]
interface IDXGIFactory : IDXGIObject
{
    HRESULT EnumAdapters(
        [in] UINT adapter_idx,
        [out] IDXGIAdapter **adapter
    );
    HRESULT MakeWindowAssociation(
        [in] HWND window,
        [in] UINT flags
    );
    HRESULT GetWindowAssociation(
        [in] HWND *window
    );
    HRESULT CreateSwapChain(
        [in] IUnknown *device,
        [in] DXGI_SWAP_CHAIN_DESC *desc,
        [out] IDXGISwapChain **swapchain
    );
    HRESULT CreateSoftwareAdapter(
        [in] HMODULE swrast,
        [out] IDXGIAdapter **adapter
    );
}

[local] HRESULT __stdcall CreateDXGIFactory(REFIID riid, void **factory);
[local] HRESULT __stdcall CreateDXGIFactory1(REFIID riid, void **factory);

[
    object,
    local,
    uuid(54ec77fa-1377-44e6-8c32-88fd5f44c84c)
]
interface IDXGIDevice : IDXGIObject
{
    HRESULT GetAdapter(
        [out] IDXGIAdapter **adapter
    );
    HRESULT CreateSurface(
        [in] const DXGI_SURFACE_DESC *desc,
        [in] UINT surface_count,
        [in] DXGI_USAGE usage,
        [in] const DXGI_SHARED_RESOURCE *shared_resource,
        [out] IDXGISurface **surface
    );
    HRESULT QueryResourceResidency(
        [in] IUnknown *const *resources,
        [out] DXGI_RESIDENCY *residency,
        [in] UINT resource_count
    );
    HRESULT SetGPUThreadPriority(
        [in] INT priority
    );
    HRESULT GetGPUThreadPriority(
        [out] INT *priority
    );
}

typedef enum DXGI_ADAPTER_FLAG {
    DXGI_ADAPTER_FLAG_NONE         = 0,
    DXGI_ADAPTER_FLAG_REMOTE       = 1,
    DXGI_ADAPTER_FLAG_FORCE_DWORD  = 0xFFFFFFFF
} DXGI_ADAPTER_FLAG;

typedef struct DXGI_ADAPTER_DESC1 {
    WCHAR  Description[128];
    UINT   VendorId;
    UINT   DeviceId;
    UINT   SubSysId;
    UINT   Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID   AdapterLuid;
    UINT   Flags;
} DXGI_ADAPTER_DESC1;

[
    object,
    uuid(29038f61-3839-4626-91fd-086879011a05),
    local,
    pointer_default(unique)
]
interface IDXGIAdapter1 : IDXGIAdapter
{
    HRESULT GetDesc1([out] DXGI_ADAPTER_DESC1 *pDesc);
}

[
    object,
    uuid(77db970f-6276-48ba-ba28-070143b4392c),
    local,
    pointer_default(unique)
]
interface IDXGIDevice1 : IDXGIDevice
{
    HRESULT SetMaximumFrameLatency([in] UINT MaxLatency);
    HRESULT GetMaximumFrameLatency([out] UINT *pMaxLatency);
}

[
    object,
    uuid(770aae78-f26f-4dba-a829-253c83d1b387),
    local,
    pointer_default(unique)
 ]
interface IDXGIFactory1 : IDXGIFactory
{
    HRESULT EnumAdapters1([in] UINT Adapter, [out] IDXGIAdapter1 **ppAdapter);
    BOOL IsCurrent();
}


[
    object,
    local,
    uuid(3e1ff30b-c951-48c3-b010-0fb49f3dca71)
]
interface IWineDXGIDevice : IDXGIDevice1
{
    HRESULT create_surface(
        [in] struct wined3d_texture *wined3d_texture,
        [in] DXGI_USAGE usage,
        [in] const DXGI_SHARED_RESOURCE *shared_resource,
        [in] IUnknown *outer,
        [out] void **surface
    );
    HRESULT create_swapchain(
        [in] struct wined3d_swapchain_desc *desc,
        [in] BOOL implicit,
        [out] struct wined3d_swapchain **wined3d_swapchain
    );
}

[
    object,
    local,
    uuid(f2b918f3-603f-430a-9ccd-55872b6e85df)
]
interface IWineDXGIDeviceParent : IUnknown
{
    struct wined3d_device_parent *get_wined3d_device_parent();
}
